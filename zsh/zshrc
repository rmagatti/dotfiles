# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git fzf fzf-tab aws fast-syntax-highlighting poetry)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='nvim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

function kc() {
  local ENV=${1:-"dev"}

  if [ "$ENV" = "dev" ]; then
    gcloud container clusters get-credentials montra-development-env-gke-cluster --project montra-development-env --region us-east1
  elif [ "$ENV" = "staging" ]; then
    gcloud container clusters get-credentials montra-staging-env-gke-cluster --project montra-staging-env --region us-east1
  elif [ "$ENV" = "production" ]; then
    gcloud container clusters get-credentials montra-production-env-gke-cluster --project montra-production-env --region us-east1
  else
    echo "Defaulting to development-env"
    gcloud container clusters get-credentials montra-development-env-gke-cluster --project montra-development-env --region us-east1
  fi
}

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Git commit with branch name before customized message
function gitc() {
  if [ -z "$1" ];
  then
    echo WARN: No commit message was given. Running git commit without a message.
    git commit
  else
    branch="$(git symbolic-ref --short HEAD)"
    ticket="$(grep -Eo '(?i)sc[0-9]+|sc-[0-9]+|ENG.*-[0-9]+' <<< \"$branch\")"
    pair=($(grep -Eo '[[:alpha:]]+|[0-9]+' <<< \"$ticket\"))
    prefix="$pair[1]:u-$pair[2]"
    if [ -z "$ticket" ];
    then
      git commit -m "$1"
    else
      git commit -m "$prefix: $1"
    fi
  fi
}

function gitcan() {
  git commit --amend --no-edit
}

function gitca() {
  git commit --amend
}

function gclone() {
  git clone git@github.com:Montra-Interactive/$1.git ~/Projects/Montra/$1
}


# function gitm() {
#     if [ -z "$1" ];
#     then
#         echo ERROR: No branch specified. Please enter a branch 1>&2
#         echo gitm branch-name
#     else
#         BRANCH_TO_MERGE=$(git symbolic-ref --short HEAD) && git checkout $1 && git pull && git merge $BRANCH_TO_MERGE && git push && git checkout $BRANCH_TO_MERGE
#     fi
# }
#

function gitm() {
  git merge $(git branch --sort=-committerdate | fzf)
}

function gitmdev() {
  BRANCH_TO_MERGE=$(git symbolic-ref --short HEAD) && git checkout development && git pull && git merge $BRANCH_TO_MERGE && git push && git checkout $BRANCH_TO_MERGE
}

function gitmalpha() {
  BRANCH_TO_MERGE=$(git symbolic-ref --short HEAD) && git checkout alpha && git pull && git merge $BRANCH_TO_MERGE && git push && git checkout $BRANCH_TO_MERGE
}

function gitchb() {
  git checkout $(git branch --sort=-committerdate | fzf)
}

function gitchr() {
  git fetch && git checkout --track $(git branch --sort=-committerdate -r | fzf)
}

function gitdc() {
  code $(git diff --name-only)
}

function unstringify() {
  pbpaste | jq -r . | pbcopy
  echo "Unstringified copied to clipboard"
}

# Aliases
alias l="ls -lh"
alias gits="git status"
alias gitch="git checkout"
alias gitnb="git checkout -b"
alias gita="git add"
alias gitl="git log"
alias gitps="git push"
alias gitpl="git pull"
# Excludes packer_compiled.lua in the diff every time
alias gitd="git diff ':(exclude)nvim/lua/packer_compiled.lua'"
alias gitb="git branch --sort=committerdate"
# alias gitcb="git branch | grep -v "staging" | xargs git branch -D"
alias gitst="git stash"
alias gitstp="git stash pop"
alias gitcl="git clone"
alias v="nvim"
alias vv="neovide --frame='transparent' --no-vsync"

function gitsqa() {
  git reset $(git merge-base origin/master $(git rev-parse --abbrev-ref HEAD)) &&
  git add -A && git commit
}

function gitsqi() {
  git rebase -i $(git merge-base master $(git rev-parse --abbrev-ref HEAD)) &&
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# # Nvm stuff
# export NVM_DIR="$HOME/.nvm"
# [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
# [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/Users/rmagatti/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/Users/rmagatti/anaconda3/etc/profile.d/conda.sh" ]; then
#         . "/Users/rmagatti/anaconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/Users/rmagatti/anaconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda initialize <<<

# Set fzf installation directory path
export FZF_BASE=/opt/homebrew/bin/fzf
enable-fzf-tab

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# export SDKMAN_DIR="/Users/ronnieandrewmagatti/.sdkman"
# [[ -s "/Users/ronnieandrewmagatti/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/ronnieandrewmagatti/.sdkman/bin/sdkman-init.sh"
# alias awsx="source _awsx"

# Add goneovim to path
export PATH="/Applications/goneovim.app/Contents/MacOS:$PATH"

# ====== Brew
# Uninstall
function brr() {
  local uninst=$(brew leaves | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:clean]'")

  if [[ $uninst ]]; then
    for prog in $(echo $uninst)
    do brew uninstall $prog
    done
  fi
}

# Update
function bru() {
  local upd=$(brew leaves | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:update]'")

  if [[ $upd ]]; then
    for prog in $(echo $upd)
    do brew upgrade $prog
    done
  fi
}
# Install
function bri() {
  local inst=$(brew formulae | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:install]'")

  if [[ $inst ]]; then
    for prog in $(echo $inst)
    do brew install $prog
    done
  fi
}

alias gnvim=goneovim
alias gn=goneovim --exttabline --extcmdline --extmessages --extpopupmenu
if [ -n "${NVIM_LISTEN_ADDRESS+x}" ]; then
  export COLORTERM="truecolor"
fi

bindkey '^r' fzf-history-widget

# Add bindings to the vicmd keymap
bindkey -a j backward-char
bindkey -a k down-history
bindkey -a l up-history
bindkey -a ';' forward-char

bindkey "รง" fzf-cd-widget

# https://github.com/ohmyzsh/ohmyzsh/issues/1720#issuecomment-286366959
# Start typing + [Up-Arrow] - fuzzy find history forward
if [[ -n "${terminfo[kcuu1]}" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search

  bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
  bindkey -M viins "${terminfo[kcuu1]}" up-line-or-beginning-search
  bindkey -M vicmd "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# Start typing + [Down-Arrow] - fuzzy find history backward
if [[ -n "${terminfo[kcud1]}" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search

  bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
  bindkey -M viins "${terminfo[kcud1]}" down-line-or-beginning-search
  bindkey -M vicmd "${terminfo[kcud1]}" down-line-or-beginning-search
fi

# FZF
export FZF_DEFAULT_COMMAND="fd . $HOME"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -t d . $HOME/Projects"

export VISUAL=nvim
export EDITOR=nvim

# place this after nvm initialization!
# autoload -U add-zsh-hook
# load-nvmrc() {
#   local node_version="$(nvm version)"
#   local nvmrc_path="$(nvm_find_nvmrc)"
#
#   if [ -n "$nvmrc_path" ]; then
#     local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")
#
#     if [ "$nvmrc_node_version" = "N/A" ]; then
#       nvm install
#     elif [ "$nvmrc_node_version" != "$node_version" ]; then
#       nvm use
#     fi
#   elif [ "$node_version" != "$(nvm version default)" ]; then
#     echo "Reverting to nvm default version"
#     nvm use default
#   fi
# }
# add-zsh-hook chpwd load-nvmrc
# load-nvmrc

# Set open file limit so packer.nvim does not hang
ulimit -S -n 2048

# Pyenv
# eval "$(pyenv init -)"
# export PATH="/Users/ronnieandrewmagatti/.pyenv/shims:${PATH}"

# export PYENV_ROOT="$HOME/.pyenv"
# command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init -)"
# # eval "$(pyenv virtualenv-init -)"

# Data stuff
# export PATH=$PATH:~/.local/bin
# export PYSPARK_DRIVER_PYTHON="jupyter"
# export PYSPARK_DRIVER_PYTHON_OPTS="notebook"

# eval $(thefuck --alias)
export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

export PATH=$PATH:$HOME/.cargo/bin
export CC=/usr/bin/clang
source $(brew --prefix nvm)/nvm.sh
export PATH="$(brew --prefix)/opt/python@3/libexec/bin:$PATH"

# Add ssh agent
ssh-add

# bun completions
[ -s "/Users/ronnieandrewmagatti/.bun/_bun" ] && source "/Users/ronnieandrewmagatti/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
PATH=$PATH:~/.local/bin
# export CC=gcc-12 

# Created by `pipx` on 2023-12-05 03:57:18
export PATH="$PATH:/Users/ronniemagatti/.local/bin"
export PATH="/Library/Frameworks/GStreamer.framework/Versions/1.0/bin${PATH:+:$PATH}"

# bun completions
[ -s "/Users/ronniemagatti/.bun/_bun" ] && source "/Users/ronniemagatti/.bun/_bun"


export SUPABASE_URL=https://hjtxndtruiwltvdvfpdv.supabase.co/rest/v1
export SUPABASE_API_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU 
